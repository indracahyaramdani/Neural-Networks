import numpy as np
import nnfs
import os
import cv2
import pickle
import copy

nnfs.init()
#Dense layer
class Laye_Dense:

    #Layer initialization
    def __init__(self,n_inputs, n_neurons, weight_regularizer_L1=0,weight_regularizer_L2=0,bias_regularizer_L1=0,bias_regularizer_L2=0):

    







































# Batas Erykka
        # vanilla SGD parameter update + normalization
        # with square rooted cache
        layer.weights += -self.current_learning_rate * \ layer.dweights / \ (np.sqrt(layer.weights_cache) + self.epsilon)
        layer.biases += -self.current_learning_rate * \ layer.dbiases / \ (np.sqrt(layer.bias_cache) + self.epsilon)

    #call once after any parameter updates
    def post_update_params(self):
    self.iterations += 1

#RMSprop optimizer
class optimizer_RMSprop:

    #initialize optimizer  - set settings
    def __init__(self, learning_rate=0.001, decay=0., epsilon=1e-7, rho=0.9):
        self.learning_rate = learning_rate
        self.current_learning_rate = learning_rate
        self_decay = decay
        self.iteration = 0
        self.epsilon = epsilon
        self.rho = rho

    #call once before any parameter updates
    def pre_update_params(self):
        if self.decay:
            self.current_learning_rate = self.learning_rate * \ (1. / (1. + self.decay * self.iterations))

    # update parameter
    def 


























































































































# Batas Widya
























































































# Batas Indra















































































































# Batas Ferna



































# Batas Widya










































#Batas Indra

































